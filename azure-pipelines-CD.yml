trigger:
  branches:
    include:
      - main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'valberxz21/fcg-api'
  imageTag: '$(Build.BuildId)'

stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore solution'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--no-restore --configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: 'tests/FCG.Tests/FCG.Tests.csproj'
        arguments: '--no-build --configuration Release'
        publishTestResults: true

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'XPlat'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Run BDD tests'
      inputs:
        command: 'test'
        projects: 'tests/FCG.Tests/FCG.BDD.Tests.csproj'
        arguments: '--no-build --configuration Release'
        publishTestResults: true

    - task: PublishCodeCoverageResults@2
      inputs:
        codeCoverageTool: 'XPlat'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

- stage: CD
  displayName: Build and Push Docker Image to DockerHub
  jobs:
  - job: PushToDockerHub
    displayName: Build and Push Docker Image
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: Docker@2
      displayName: Docker Login
      inputs:
        command: login
        containerRegistry: DockerHub-Valber

    - script: |
        echo "üî® Buildando imagem com tag $(imageTag)"
        docker build --no-cache -f src/FCG.API/Dockerfile \
          -t $(imageName):$(imageTag) \
          -t $(imageName):latest .
      displayName: Build Docker image

    - task: Docker@2
      displayName: Push Docker image to DockerHub
      inputs:
        command: push
        tags: |
          $(imageName):$(imageTag)

    - script: |
        echo "üîç Baixando imagem do Docker Hub para inspecionar..."
        docker pull $(imageName):$(imageTag)
        docker inspect $(imageName):$(imageTag) --format='Imagem: {{.RepoTags}} | SHA: {{.Id}}'
      displayName: 'üîé Verificar digest da imagem Docker'

    - task: AzureCLI@2
      displayName: '‚öôÔ∏è For√ßar atualiza√ß√£o da imagem na WebApp'
      inputs:
        azureSubscription: 'FCGConnection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "üîÑ Atualizando imagem na WebApp via Azure CLI..."
          az webapp config container set \
            --name fcg49app \
            --resource-group FCG \
            --docker-custom-image-name "$(imageName):$(imageTag)" \
            --docker-registry-server-url https://index.docker.io
