trigger:
  branches:
    include:
      - main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'valberxz21/fcg.api'
  imageTag: '$(Build.BuildId)'
  
  dockerRegistryServiceConnection: 'DockerConnectionFCG'
  containerRegistry: 'fcg49registry-h3d8cvhqbxgnateu.azurecr.io'
  imageRepository: 'fcgapi'
  dockerfilePath: 'src/FCG.API/Dockerfile'
  
stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore solution'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--no-restore --configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: 'tests/FCG.Tests/FCG.Tests.csproj'
        arguments: '--no-build --configuration Release'
        publishTestResults: true

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'XPlat'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Run BDD tests'
      inputs:
        command: 'test'
        projects: 'tests/FCG.Tests/FCG.BDD.Tests.csproj'
        arguments: '--no-build --configuration Release'
        publishTestResults: true

    - task: PublishCodeCoverageResults@2
      inputs:
        codeCoverageTool: 'XPlat'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

- stage: CD
  displayName: 'Build and Push Docker Image' # Nome mais gen√©rico
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    # Esta tarefa √∫nica faz o build e o push da imagem
    - task: Docker@2
      displayName: 'Build and Push image to ACR'
      inputs:
        # A conex√£o de servi√ßo para autentica√ß√£o
        containerRegistry: $(dockerRegistryServiceConnection) 
        
        # O nome do reposit√≥rio dentro do seu ACR
        repository: $(imageRepository)
        
        # O comando agora √© 'buildAndPush'
        command: 'buildAndPush'
        
        # O caminho para o seu Dockerfile
        Dockerfile: $(dockerfilePath)
        
        # O contexto de build
        buildContext: $(Build.SourcesDirectory)
        
        # A tag para a imagem
        tags: |
          $(tag)

- stage: Deploy
  displayName: üöÄ Publicar na Azure WebApp
  jobs:
    - job: DeployToWebApp
      displayName: Atualizar WebApp com nova imagem
      pool:
        vmImage: ubuntu-latest
      steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy: fcg-49-webapp'
            inputs:
              azureSubscription: 'FCGConnection' # O nome da sua Conex√£o de Servi√ßo no Azure DevOps
              appName: 'fcg-49-webapp' # O nome do seu Servi√ßo de Aplicativo no Azure
              # A linha abaixo √© a mais importante.
              # Ela constr√≥i o nome completo da imagem dinamicamente usando as vari√°veis.
              # Ex: fcgconteiner-dygzeugrgbcgfaac.azurecr.io/fcgapi:12345
              imageName: '$(containerRegistry)/$(imageRepository):$(tag)'