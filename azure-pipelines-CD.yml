trigger:
  branches:
    include:
      - main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'valberxz21/fcg-api'
  imageTag: '$(Build.BuildId)'
  
  dockerRegistryServiceConnection: 'AzureConteinerConnection'
  containerRegistry: 'fcgconteiner-dygzeugrgbcgfaac.azurecr.io'
  imageRepository: 'fcgapi'
  dockerfilePath: 'FCG.API/Dockerfile'
  
stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore solution'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--no-restore --configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: 'tests/FCG.Tests/FCG.Tests.csproj'
        arguments: '--no-build --configuration Release'
        publishTestResults: true

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'XPlat'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Run BDD tests'
      inputs:
        command: 'test'
        projects: 'tests/FCG.Tests/FCG.BDD.Tests.csproj'
        arguments: '--no-build --configuration Release'
        publishTestResults: true

    - task: PublishCodeCoverageResults@2
      inputs:
        codeCoverageTool: 'XPlat'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

- stage: CD
  displayName: Build and Push Docker Image to DockerHub
  jobs:
  - job: PushToDockerHub
    displayName: Build and Push Docker Image
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'build'
        Dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
        buildContext: $(buildContext)
    
    - task: Docker@2
      displayName: 'Push Docker image to ACR'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'push'
        tags: |
          $(tag)

- stage: Deploy
  displayName: ðŸš€ Publicar na Azure WebApp
  jobs:
    - job: DeployToWebApp
      displayName: Atualizar WebApp com nova imagem
      pool:
        vmImage: ubuntu-latest
      steps:
          - task: AzureWebAppContainer@1
            displayName: Deploy container image
            inputs:
              azureSubscription: 'FCGConnection'
              appName: 'fcg49app'
              containers: 'fcgregistry.azurecr.io/fcgapi:latest'
